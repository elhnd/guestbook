route => link between the request path and a PHP callable (controllers), a function that creates the HTTP response for that request
symfony console list make => list all command vavailable under a diven namespace

Configurations formats => Symfony supports YAML, XML, PHP and PHP attributes out of the box.
Configuration related to packages => YAML is the best choice.
Configuration related to PHP code => attributes are better choice. The configuration is next to the code that it configures.
Symfony exposes the request data through a Request object. When Symfony sees a controller argument whith this type-hint, it 
    automaticalyy knows to pass it to you!;

A great debug helper is the Symfony dump() function. It is always available and allows you to dump complex 
    variables in a nice interactive format.

symfony var:export => check all environment variables exposed by sSymfony.

Symfony Components => Packages that implement core features and low level abstractions that most applications need (routing, console, HTTP client, cache, ...)

Symfony Bundles => Packages that add high-level features or provide integrations with third-party libraries (bundles are mostly contributed by the community)

Easy Admin :


Dispatcher => A dispatcher dispatches certain events at specific times that listeners can listen to. Listeners are hooks into framework internals.
Subscriber => A subscriber is a listener with a static getSubscribedEvents() method that returns its configuration. 
    This allows subscibers to be registered in the Symfony dispatcher automatically.

symfony console make:subscriber TwigEventSubscriber

The ORM\PrePersist event is triggred when the object is stored in the database for the very first time.

Dependency injection container => the container is responsible for managing services: creating them and injecting them whenever needed.

A service is a "global" object that provides features (e.g. a mailer, a logger, a slugger, etc.) unlike data objects (e.g. Doctrine entity instances).

When a class implements some specific interfaces, the container knows that the class needs to be registered in a certain way.

A form type describes the form fields bound to a model. It does the data conversion between submitted data and the model class properties.
By default, Symfony uses metadata from the Comment entity - such as the Doctrine metadata - to guess configuration about each field.