Extension Ã  installer si non installer :

[OK] Git installed
[OK] PHP installed version 8.3.12 (/usr/bin/php8.3)
[OK] PHP extension "mbstring" installed - required
[OK] PHP extension "openssl" installed - required
[OK] PHP extension "zip" installed - optional - needed only for chapter 17 (Panther)
[OK] PHP extension "gd" installed - optional - needed only for chapter 23 (Imagine)
[OK] PHP extension "redis" installed - optional - needed only for chapter 31
[OK] PHP extension "amqp" installed - optional - needed only for chapter 32
[OK] PHP extension "xml" installed - required
[OK] PHP extension "session" installed - required
[OK] PHP extension "xsl" installed - required
[OK] PHP extension "sodium" installed - required
[OK] PHP extension "iconv" installed - required
[OK] PHP extension "intl" installed - required
[OK] PHP extension "pdo_pgsql" installed - required
[OK] PHP extension "ctype" installed - required
[OK] PHP extension "tokenizer" installed - required
[OK] PHP extension "curl" installed - optional - needed only for chapter 17 (Panther)
[OK] PHP extension "json" installed - required
[OK] Composer installed
[OK] Docker installed
[OK] Docker Compose installed
[OK] npm installed

Platform.sh production :

    create new project => symfony cloud:project:create --title="Guestbook" --plan=development
    deploy => symfony cloud:deploy
    check is ok => symfony cloud:url -1
    debugging => symfony cloud:logs --tail
    connect with ssh => symfony cloud:ssh
    Accessing database => symfony cloud:tunnel:open && symfony var:expose-from-tunnel
        run => symfony run psql && symfony cloud:tunnel:close

route => link between the request path and a PHP callable (controllers), a function that creates the HTTP response for that request
symfony console list make => list all command vavailable under a diven namespace
Tail log => symfony server:log

Accessing local Database => symfony run psql (docker compose exec database psql app app)
Dumping and restoring Database Data => symfony run pg_dump --data-only > dump.sql  && symfony run psql < dump.sql

Configurations formats => Symfony supports YAML, XML, PHP and PHP attributes out of the box.
Configuration related to packages => YAML is the best choice.
Configuration related to PHP code => attributes are better choice. The configuration is next to the code that it configures.
Symfony exposes the request data through a Request object. When Symfony sees a controller argument whith this type-hint, it 
    automaticalyy knows to pass it to you!;

A great debug helper is the Symfony dump() function. It is always available and allows you to dump complex 
    variables in a nice interactive format.

symfony var:export => check all environment variables exposed by sSymfony.

Symfony Components => Packages that implement core features and low level abstractions that most applications need (routing, console, HTTP client, cache, ...)

Symfony Bundles => Packages that add high-level features or provide integrations with third-party libraries (bundles are mostly contributed by the community)

Easy Admin :


Dispatcher => A dispatcher dispatches certain events at specific times that listeners can listen to. Listeners are hooks into framework internals.
Subscriber => A subscriber is a listener with a static getSubscribedEvents() method that returns its configuration. 
    This allows subscibers to be registered in the Symfony dispatcher automatically.

symfony console make:subscriber TwigEventSubscriber

The ORM\PrePersist event is triggred when the object is stored in the database for the very first time.

Dependency injection container => the container is responsible for managing services: creating them and injecting them whenever needed.

A service is a "global" object that provides features (e.g. a mailer, a logger, a slugger, etc.) unlike data objects (e.g. Doctrine entity instances).

When a class implements some specific interfaces, the container knows that the class needs to be registered in a certain way.

A form type describes the form fields bound to a model. It does the data conversion between submitted data and the model class properties.
By default, Symfony uses metadata from the Comment entity - such as the Doctrine metadata - to guess configuration about each field.

User entity => symfony console make:user Admin
Generating password => symfony console security:hash-password
passer123 => $2y$13$hOo98Dwj971v9MW.W9Jo/.E2.cVS/5RoMmHjrJzvISHbzk/Y4Xuma

symfony run psql -c "INSERT INTO admin (id, username, roles, password) \
  VALUES (nextval('admin_id_seq'), 'admin', '[\"ROLE_ADMIN\"]', \
  '\$2y\$13\$hOo98Dwj971v9MW.W9Jo/.E2.cVS/5RoMmHjrJzvISHbzk/Y4Xuma')"

docker compose exec database psql app app -c "INSERT INTO admin (id, username, roles, password) \
  VALUES (nextval('admin_id_seq'), 'admin', '[\"ROLE_ADMIN\"]', \
  '\$2y\$13\$hOo98Dwj971v9MW.W9Jo/.E2.cVS/5RoMmHjrJzvISHbzk/Y4Xuma')"

login form => symfony console make:security:form-login

route names and paths => symfony console debug:router

vault env variable => symfony console secrets:set AKISMET_KEY