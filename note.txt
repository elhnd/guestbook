Extension Ã  installer si non installer :

[OK] Git installed
[OK] PHP installed version 8.3.12 (/usr/bin/php8.3)
[OK] PHP extension "mbstring" installed - required
[OK] PHP extension "openssl" installed - required
[OK] PHP extension "zip" installed - optional - needed only for chapter 17 (Panther)
[OK] PHP extension "gd" installed - optional - needed only for chapter 23 (Imagine)
[OK] PHP extension "redis" installed - optional - needed only for chapter 31
[OK] PHP extension "amqp" installed - optional - needed only for chapter 32
[OK] PHP extension "xml" installed - required
[OK] PHP extension "session" installed - required
[OK] PHP extension "xsl" installed - required
[OK] PHP extension "sodium" installed - required
[OK] PHP extension "iconv" installed - required
[OK] PHP extension "intl" installed - required
[OK] PHP extension "pdo_pgsql" installed - required
[OK] PHP extension "ctype" installed - required
[OK] PHP extension "tokenizer" installed - required
[OK] PHP extension "curl" installed - optional - needed only for chapter 17 (Panther)
[OK] PHP extension "json" installed - required
[OK] Composer installed
[OK] Docker installed
[OK] Docker Compose installed
[OK] npm installed

Platform.sh production :

    create new project => symfony cloud:project:create --title="Guestbook" --plan=development
    deploy => symfony cloud:deploy
    check is ok => symfony cloud:url -1
    debugging => symfony cloud:logs --tail
    connect with ssh => symfony cloud:ssh
    Accessing database => symfony cloud:tunnel:open && symfony var:expose-from-tunnel
        run => symfony run psql && symfony cloud:tunnel:close

route => link between the request path and a PHP callable (controllers), a function that creates the HTTP response for that request
symfony console list make => list all command vavailable under a diven namespace
Tail log => symfony server:log

Accessing local Database => symfony run psql (docker compose exec database psql app app)
Dumping and restoring Database Data => symfony run pg_dump --data-only > dump.sql  && symfony run psql < dump.sql

Configurations formats => Symfony supports YAML, XML, PHP and PHP attributes out of the box.
Configuration related to packages => YAML is the best choice.
Configuration related to PHP code => attributes are better choice. The configuration is next to the code that it configures.
Symfony exposes the request data through a Request object. When Symfony sees a controller argument whith this type-hint, it 
    automaticalyy knows to pass it to you!;

A great debug helper is the Symfony dump() function. It is always available and allows you to dump complex 
    variables in a nice interactive format.

symfony var:export => check all environment variables exposed by sSymfony.

Symfony Components => Packages that implement core features and low level abstractions that most applications need (routing, console, HTTP client, cache, ...)

Symfony Bundles => Packages that add high-level features or provide integrations with third-party libraries (bundles are mostly contributed by the community)

Easy Admin :


Dispatcher => A dispatcher dispatches certain events at specific times that listeners can listen to. Listeners are hooks into framework internals.
Subscriber => A subscriber is a listener with a static getSubscribedEvents() method that returns its configuration. 
    This allows subscibers to be registered in the Symfony dispatcher automatically.

symfony console make:subscriber TwigEventSubscriber

The ORM\PrePersist event is triggred when the object is stored in the database for the very first time.

Dependency injection container => the container is responsible for managing services: creating them and injecting them whenever needed.

A service is a "global" object that provides features (e.g. a mailer, a logger, a slugger, etc.) unlike data objects (e.g. Doctrine entity instances).

When a class implements some specific interfaces, the container knows that the class needs to be registered in a certain way.

A form type describes the form fields bound to a model. It does the data conversion between submitted data and the model class properties.
By default, Symfony uses metadata from the Comment entity - such as the Doctrine metadata - to guess configuration about each field.

User entity => symfony console make:user Admin
Generating password => symfony console security:hash-password
passer123 => $2y$13$hOo98Dwj971v9MW.W9Jo/.E2.cVS/5RoMmHjrJzvISHbzk/Y4Xuma

symfony run psql -c "INSERT INTO admin (id, username, roles, password) \
  VALUES (nextval('admin_id_seq'), 'admin', '[\"ROLE_ADMIN\"]', \
  '\$2y\$13\$hOo98Dwj971v9MW.W9Jo/.E2.cVS/5RoMmHjrJzvISHbzk/Y4Xuma')"

docker compose exec database psql app app -c "INSERT INTO admin (id, username, roles, password) \
  VALUES (nextval('admin_id_seq'), 'admin', '[\"ROLE_ADMIN\"]', \
  '\$2y\$13\$hOo98Dwj971v9MW.W9Jo/.E2.cVS/5RoMmHjrJzvISHbzk/Y4Xuma')"

login form => symfony console make:security:form-login

route names and paths => symfony console debug:router

vault env variable => symfony console secrets:set AKISMET_KEY
dev enc => symfony console secrets:set AKISMET_KEY --env=test

unit test package => symfony composer req phpunit --dev

generate class test => symfony console make:test TestCase SpamCheckerTest 
                       symfony console make:test WebTestCase Controller\\ConferenceController
                       symfony console make:test PantherTestCase Controller\\ConferenceController

The MockHttpClient class makes it possible to mock any HTTP server. It takes an array of MockResponse instances that contain the expected body and Response headers.

run test => symfony php bin/phpunit

$client = static::createClient() => the $client variable simulates a browser

for env test => symfony console doctrine:database:create --env=test
                symfony console doctrine:migrations:migrate
                symfony console doctrine:migrations:migrate -n --env=test

Fixture => symfony composer req orm-fixtures --dev

show hasher services => symfony console debug:autowiring hasher

load fixtures => symfony console doctrine:fixtures:load --env=test

Load env test => symfony server:stop
                APP_ENV=test symfony server:start -d

reset database after eatxh test => symfony composer req "dama/doctrine-test-bundle:^8" --dev

Symfony Panther for real browser => symfony composer req panther --dev

The SYMFONY_PROJECT_DEFAULT_ROUTE_URL environment variable contains the URL of the local web server.

The maker bundle supports generating the following types of tests depending on how you want to test your application:
    TestCase: Basic PHPUnit tests;
    KernelTestCase: Basic tests that have access to Symfony services;
    WebTestCase: To run browser-like scenarios, but that don't execute JavaScript code;
    ApiTestCase: To run API-oriented scenarios;
    PantherTestCase: To run e2e scenarios, using a real-browser or HTTP client and a real web server.

From a PHPUnit test, you can get any service from the container via self::getContainer()->get(); it also gives access to non-public services.

Understanding Messenger for asynchronous

installation => symfony composer req doctrine-messenger

When some logic should be executed asynchronously, send a message to a messenger bus. The bus stores the message in a queue and returns immediately
to let the flow of operations resume as fast as possible.
A cousumer runs continuously in the background to read new messages on the queu and execute the associated logic. The consumer can run on the same server 
as the web application or on a separate one.

consummer command => symfony console messenger:consume async -vv
running bacground => symfony run -d --watch=config,src,templates,vendor/composer/installed.json symfony console messenger:consume async -vv

list bacground workers => symfony server:status
stop workers => kill PID

inspaect failed message => symfony console messenger:failed:show
retry => symfony console messenger:failed:retry

get log workers in the cloud => symfony cloud:logs --worker=messages all


Making Decisions with a Workflow 

install => symfony composer req workflow

diagram png worflow with dot => symfony console workflow:dump comment | dot -Tpng -o workflow.png

Sendineg Email

To send an email, you can choose between several Email class abstractions; from Message, the lowest level, to NotificationEmail, the highest one.
You will probably use the Email class the most, but NotificationEmail is the perfect choice for internal emails.

Inky for templating mail => instead of HTML to design emails. It helps create responsive emails that are compatible with all popular email clients.
    installation => symfony composer req "twig/cssinliner-extra:^3" "twig/inky-extra:^3"
In emails, generate URLs with url() instead of path() as you need absolute ones (with scheme and host).

Mail catcher => Instead of using a "real" SMTP server or a third-party provider to send emails, let's use a mail catcher. 
A mail catcher provides an SMTP server that does not deliver the emails, but makes them available through a Web interface instead.
open mail catcher => symfony open:local:webmail

To be on the safe side, emails are only sent on the master branch by default. Enable SMTP explicitly on non-master branches if you know what you are doing:
    symfony cloud:env:info enable_smtp on

